from collections import defaultdict
from yaml import load
import os


files, = glob_wildcards("data/{sample}/outs/filtered_feature_bc_matrix.h5")    

files=list(filter(lambda i: "/" not in i, files)) #do not capture subdirectories etc

#QC paramaters
min_cells=config.get("min_cells",3)
min_features=config.get("min_features",200)
percent_mt=config.get("percent_mt",10)
min_coverage=config.get("min_coverage",1000)
highly_variable_features=config.get("highly_variable_features",2000)
#doublet_filter=config.get("doublet_filter","T") #True:T or False:F

mad.nCount=config.get("mad.nCount",3)
mad.nFeature=config.get("mad.nFeature",3)



#clustering and normalization paramaters
normalization_method=config.get("normalization_method","LogNormalize")
scale_factor=config.get("scale_factor",10000)
resolution=[str(config.get("resolution",0.8))] #by default two resolution levels will be calculated

#Differential expression paramaters
logfc_threshold=config.get("logfc_threshold",0.25)
test_use=config.get("test_use","wilcox")

#GO enrichment paramaters
algorithm=config.get("algorithm","weight01")
statistics=config.get("statistics","ks")
mapping=config.get("mapping","org.Hs.eg.db")
ontology = config.get("ontology","BP")

#alternative routes
route=config.get("route","minimal") # select standard route for analysis
integration_id=config.get("integration_id","combined")
integration_resolution=str(config.get("resolution",0.8))
celltypist_model=config.get("celltypist_model","Immune_All_Low.pkl")



def get_mem_mb(wildcards, threads):
    return threads * 10000

include: "rules/spatialseurat.smk"
include: "rules/deconvolution.smk"

if route == "minimal":
    rule all:
        input:
            expand("analyses/raw/{sample}.rds",sample=files)

elif route == "standard":

    rule all:
        input:
            expand("results/{sample}/clusteringTree/clusteringTree-{sample}.pdf",sample=files),
            expand(["results/{sample}/resolution-" + x + "/{sample}.positive-markers-forAllClusters.xlsx" for x in resolution],sample=files),
            #expand(["results/{sample}/resolution-" + x + "/{sample}.number-of-cells-per-cluster.xlsx" for x in resolution],sample=files),
            expand("analyses/raw/{sample}.rds",sample=files),
            expand(["analyses/processed/" + x + "/{sample}.rds" for x in resolution],sample=files),
            expand(["results/{sample}/resolution-" + x + "/selected-markers/selected-markers-dotplot.pdf" for x in resolution],sample=files),
            expand(["results/{sample}/resolution-" + x + "/selected-markers/plots/" for x in resolution], sample=files),
            expand(["results/{sample}/resolution-" + x + "/markers/" for x in resolution], sample=files),
            expand(["results/{sample}/resolution-" + x + "/{sample}.umap.pdf" for x in resolution], sample=files),
            expand("results/{sample}/TissueImage/{sample}.filtered.png",sample=files)
            #expand(["results/{sample}/resolution-" + x + "/enrichment/GO-enrichment-all_clusters-ontology-{ontology}.xlsx".format(ontology=ontology) for x in resolution], sample=files)

elif route == "clustree" or route == "clusteringTree":
    rule all:
        input:
            expand("results/{sample}/clusteringTree/clusteringTree-{sample}.pdf",sample=files)


elif route == "decon":
    scrnadatafiles, = glob_wildcards("scrna/{datafile}.rds")
    rule deconvolution:
        input:
            #expand("results/{sample}/deconvolution/spotlight/{sample}-{datafile}-spotlight.pdf",datafile=scrnadatafiles,sample=files),
            #expand("results/{sample}/deconvolution/gbm/{sample}-{modelfile}-gbm.pdf",modelfile=models,sample=files),
            expand("results/{sample}/deconvolution/seurat/{sample}-{datafile}-seurat.pdf",datafile=scrnadatafiles,sample=files)
            #expand("results/{sample}/deconvolution/rctd/{sample}-{datafile}-rctd.pdf",datafile=scrnadatafiles,sample=files)
            #expand("results/{sample}/deconvolution/spotlight/{datafile}/"),
            #expand("results/{sample}/deconvolution/inhouse_gbm/{datafile}/"),
            #expand("results/{sample}/deconvolution/seurat/{datafile}/")

elif route == "tangram":
    scrnadatafiles, = glob_wildcards("scrna/{datafile}.rds")
    rule tangram:
        input:
            expand("results/{sample}/deconvolution/tangram/{sample}-{datafile}-tangram.pdf",datafile=scrnadatafiles,sample=files)

elif route == "tangramgene":
    scrnadatafiles, = glob_wildcards("scrna/{datafile}.rds")
    rule tangramgene:
        input:
            #expand("results/{sample}/deconvolution/tangramgene/{sample}-{datafile}-tangramgene.pdf",datafile=scrnadatafiles,sample=files)
            #expand("analyses/tangramgene/{datafile}/{sample}.predicted.csv",datafile=scrnadatafiles,sample=files)
            expand("results/{sample}/deconvolution/tangramgene/{datafile}/",datafile=scrnadatafiles,sample=files)

elif route == "cell2loc":
    scrnadatafiles, = glob_wildcards("scrna/{datafile}.rds")
    rule cell2l:
        input:
            #expand("results/{sample}/deconvolution/tangramgene/{sample}-{datafile}-tangramgene.pdf",datafile=scrnadatafiles,sample=files)
            expand("results/{sample}/deconvolution/cell2location/{sample}-{datafile}-cell2location.pdf",datafile=scrnadatafiles,sample=files)

else:
    pass